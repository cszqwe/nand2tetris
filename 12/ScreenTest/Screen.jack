// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen;
    static boolean color, WHITE, BLACK;
    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let WHITE = false;
        let BLACK = true;
        let color = BLACK;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while(i < 8192){
            let screen[i] = WHITE;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
		return;
    }

    function int getMask(int x) {
        var int ans, i, cur;
        let ans = 0;
        let i = 0;
        let cur = 1;
        while (~(i > x)) {
            let ans = ans + cur;
            let cur = cur * 2;
            let i = i + 1;
        }
        return ans;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, mask;
		let address = (y * 32) + (x / 16);
		let mask = Screen.getMask(x & 15);
		if (color) {
			let screen[address] = screen[address] | mask;
		} else {
			let screen[address] = screen[address] & ~mask;
		}
		return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, tmp, balance;
        if(x1 > x2){
            let tmp = x1;
            let x1 = x2;
            let x2 = tmp;
            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }
        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0;
        let b = 0;
        if (dy = 0) {
            do Screen.drawHorizental(x1, x2, y1);
            return;
        }

        if(dx = 0){
            do Screen.drawVertical(y1, y2, x1);
            return;
        }

        let balance = 0;
        if(y1 < y2){
            do Screen.drawDiagonal(x1, y1, dx, dy);
        }else{
            do Screen.drawDiagonal(x2, y2, -dx, -dy);
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while( ~(y1 > y2) ) {
            do Screen.drawHorizental(x1, x2, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy, square;
        let dy = -r;
        let square = r*r;
        while(~(dy > r)) {
            let dx = Math.sqrt(square-(dy*dy));
            do Screen.drawHorizental(x-dx, x+dx, y+dy);
            let dy = dy + 1;
        }
        return;
    }

    function void drawHorizental(int x1, int x2, int y){
        var int tmp;
        if(x1 > x2){
            let tmp = x1;
            let x1 = x2;
            let x2 = tmp;
        }
        while(~(x1 > x2)){
            do Screen.drawPixel(x1,y);
            let x1 = x1 + 1;
        }
        return;
    }

    function void drawVertical(int y1, int y2, int x){
        var int tmp;
        if(y1 > y2){
            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }
        while(~(y1 > y2)){
            do Screen.drawPixel(x,y1);
            let y1 = y1 + 1;
        }
        return;
    }

    function void drawDiagonal(int x, int y, int dx, int dy) {
       	var int balance, i, j;
    	let balance = 0;
    	let i = 0;
    	let j = 0;
    	while ((~(i > dx)) & (~(j < dy))) {
    		do Screen.drawPixel(x + i, y + j);
    		if (balance < 0) {
    			let j = j - 1;
    			let balance = balance + dx;
    		} else {
    			let i = i + 1;
    			let balance = balance + dy;
    		}
    	}
    	return;    
    }
}
