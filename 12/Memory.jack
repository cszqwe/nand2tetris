// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array memory, freeList, memoryBottom;
    static int heapBottom, heapBase, LENGTH, NEXT, ALLOC_LENGTH;

    /** Initializes the class. */
    function void init() {
        let memory = 0;
        let heapBase = 2048;
        let heapBottom = 16384;
        let freeList = heapBase;
        // offset of the length
        let LENGTH = 0; 
        // offset of the next
        let NEXT = 1;
        let freeList[LENGTH] = heapBottom - heapBase;
        let freeList[NEXT] = null; 
        let ALLOC_LENGTH = -1;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
    	let memory[address] = value;
		return;
    }

    function Array bestFit(int size){
        var Array curBlock, bestBlock;
        var int bestSize,curSize;

        let bestBlock = null;//init null
        let bestSize = heapBottom - heapBase;
        let curBlock = freeList;

        if(curBlock[NEXT] = null){
            return curBlock;
        }

        while(~(curBlock = null)){

            let curSize = curBlock[LENGTH] - 1; //alloced block only need one header

            if(~(curSize < size) & (curSize < bestSize)){

                let bestBlock = curBlock;
                let bestSize = curSize;

            }

            let curBlock = curBlock[NEXT];
        }

        return bestBlock;
    }

    function Array findPreFree(int object){
        var Array preBlock;

        //no freeBlock
        if(freeList > object){
            return null;
        }

        let preBlock = freeList;
        //preBlock.next != null && preBlock.next < object
        while(~(preBlock[NEXT] = null) & (preBlock[NEXT] < object)){
            let preBlock = preBlock[NEXT];
        }

        return preBlock;

    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array foundBlock,nextBlock,result;

        let foundBlock = Memory.bestFit(size);
        let result = foundBlock + 1;

        if(~(foundBlock = null)){
            //alloc this block, check if only need to alloc part of this block or the whole block 
            if(foundBlock[LENGTH] > (size + 3)){
                let nextBlock = foundBlock + size + 1;
                let nextBlock[NEXT] = foundBlock[NEXT];
                let nextBlock[LENGTH] = foundBlock[LENGTH] - size - 1;
                let result[ALLOC_LENGTH] = size + 1;
                let freeList = nextBlock;
            }else{
                //alloc the whole block
                let nextBlock = foundBlock[NEXT];
                let result[ALLOC_LENGTH] = foundBlock[LENGTH];
            }

            let foundBlock = nextBlock;

        }

        return result;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array preBlock,nextBlock;
        var int size;

        //if there exists pre free block, then link this block to pre block
        //else let this block be free list head and link to freelist
            //if pre block clings to this block,join two block together
            //else link together

        let size = object[ALLOC_LENGTH];
        let object = object - 1;//must consider block[-1]
        let preBlock = Memory.findPreFree(o);

        if(preBlock = null){

            let o[LENGTH] = size;
            let o[NEXT] = freeList;
            let freeList = o;

        }else{

            if((preBlock + preBlock[LENGTH]) = o){

                let preBlock[LENGTH] = preBlock[LENGTH] + size;
                let object = preBlock;

            }else{

                let o[LENGTH] = size;
                let o[NEXT] = preBlock[NEXT];
                let preBlock[NEXT] = o;

            }

        }

        //after linking, check if this block can be joined to next block
        if((o + o[LENGTH]) = o[NEXT]){
            let nextBlock = o[NEXT];
            let o[LENGTH] = o[LENGTH] + nextBlock[LENGTH];
            let o[NEXT] = nextBlock[NEXT];
        }

        return;
    }    
}
