// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array bitWeight;

    /** Initializes the library. */
    function void init() {
        var int i;
        let bitWeight = Array.new(16);
        let bitWeight[0] = 1;
        let i = 1;
        while (i < 16) {
            let bitWeight[i] = bitWeight[i-1] * 2;
            let i = i +1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
			return -x;
		}
		return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int i, cur, ans;
		
		let i = 0;
		let ans = 0;
		let cur = x;
		
		while (i < 16) {
			if (~((y & bitWeight[i]) = 0)) {
				let ans = ans + cur;
			}
			let cur = cur + cur;
			let i = i + 1;
		}
		return ans;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int ans, tmp, remaining;
        var boolean isNeg;

        let isNeg = ~((x > 0) = (y > 0));

        let x = Math.abs(x);
        let y = Math.abs(y);

        if(y > x){
            return 0;
        }

        let tmp = Math.divide(x,y + y);
        let ans = tmp * 2;
        let remaining = x - (2 * y * tmp);
        if (~(remaining < y)) {
            let ans = ans + 1;
        }

        if (isNeg) {
            return -ans;
        } else {
            return ans;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {        
        var int ans, i, tmp, square;

        let ans = 0;
        let i = 7;

        while (~(i < 0)){
            let tmp = ans + bitWeight[i];
            let square = tmp * tmp;
            if (~(square > x)) {
                let ans = tmp;
            }
            let i = i - 1;
        }

        return ans;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }
}
